# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nfdrs
else:
    import _nfdrs

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nfdrs.delete_SwigPyIterator

    def value(self):
        return _nfdrs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _nfdrs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _nfdrs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _nfdrs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _nfdrs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _nfdrs.SwigPyIterator_copy(self)

    def next(self):
        return _nfdrs.SwigPyIterator_next(self)

    def __next__(self):
        return _nfdrs.SwigPyIterator___next__(self)

    def previous(self):
        return _nfdrs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _nfdrs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _nfdrs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _nfdrs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _nfdrs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _nfdrs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _nfdrs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _nfdrs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _nfdrs:
_nfdrs.SwigPyIterator_swigregister(SwigPyIterator)
DFM_State_None = _nfdrs.DFM_State_None
DFM_State_Adsorption = _nfdrs.DFM_State_Adsorption
DFM_State_Desorption = _nfdrs.DFM_State_Desorption
DFM_State_Condensation1 = _nfdrs.DFM_State_Condensation1
DFM_State_Condensation2 = _nfdrs.DFM_State_Condensation2
DFM_State_Evaporation = _nfdrs.DFM_State_Evaporation
DFM_State_Rainfall1 = _nfdrs.DFM_State_Rainfall1
DFM_State_Rainfall2 = _nfdrs.DFM_State_Rainfall2
DFM_State_Rainstorm = _nfdrs.DFM_State_Rainstorm
DFM_State_Stagnation = _nfdrs.DFM_State_Stagnation
DFM_State_Error = _nfdrs.DFM_State_Error
class DeadFuelMoisture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _nfdrs.delete_DeadFuelMoisture

    def __init__(self, *args):
        _nfdrs.DeadFuelMoisture_swiginit(self, _nfdrs.new_DeadFuelMoisture(*args))

    def Const_assign_DeadFuelMoisture(self, rhs):
        return _nfdrs.DeadFuelMoisture_Const_assign_DeadFuelMoisture(self, rhs)

    def className(self):
        return _nfdrs.DeadFuelMoisture_className(self)

    @staticmethod
    def createDeadFuelMoisture1(*args):
        return _nfdrs.DeadFuelMoisture_createDeadFuelMoisture1(*args)

    @staticmethod
    def createDeadFuelMoisture10(*args):
        return _nfdrs.DeadFuelMoisture_createDeadFuelMoisture10(*args)

    @staticmethod
    def createDeadFuelMoisture100(*args):
        return _nfdrs.DeadFuelMoisture_createDeadFuelMoisture100(*args)

    @staticmethod
    def createDeadFuelMoisture1000(*args):
        return _nfdrs.DeadFuelMoisture_createDeadFuelMoisture1000(*args)

    @staticmethod
    def deriveAdsorptionRate(radius):
        return _nfdrs.DeadFuelMoisture_deriveAdsorptionRate(radius)

    @staticmethod
    def deriveDiffusivitySteps(radius):
        return _nfdrs.DeadFuelMoisture_deriveDiffusivitySteps(radius)

    @staticmethod
    def deriveMoistureSteps(radius):
        return _nfdrs.DeadFuelMoisture_deriveMoistureSteps(radius)

    @staticmethod
    def derivePlanarHeatTransferRate(radius):
        return _nfdrs.DeadFuelMoisture_derivePlanarHeatTransferRate(radius)

    @staticmethod
    def deriveRainfallRunoffFactor(radius):
        return _nfdrs.DeadFuelMoisture_deriveRainfallRunoffFactor(radius)

    @staticmethod
    def deriveStickNodes(radius):
        return _nfdrs.DeadFuelMoisture_deriveStickNodes(radius)

    @staticmethod
    def uniformRandom(min, max):
        return _nfdrs.DeadFuelMoisture_uniformRandom(min, max)

    def initializeEnvironment(self, *args):
        return _nfdrs.DeadFuelMoisture_initializeEnvironment(self, *args)

    def update(self, *args):
        return _nfdrs.DeadFuelMoisture_update(self, *args)

    def zero(self):
        return _nfdrs.DeadFuelMoisture_zero(self)

    def elapsedTime(self):
        return _nfdrs.DeadFuelMoisture_elapsedTime(self)

    def initialized(self):
        return _nfdrs.DeadFuelMoisture_initialized(self)

    def name(self):
        return _nfdrs.DeadFuelMoisture_name(self)

    def meanMoisture(self):
        return _nfdrs.DeadFuelMoisture_meanMoisture(self)

    def meanWtdMoisture(self):
        return _nfdrs.DeadFuelMoisture_meanWtdMoisture(self)

    def medianRadialMoisture(self):
        return _nfdrs.DeadFuelMoisture_medianRadialMoisture(self)

    def meanWtdTemperature(self):
        return _nfdrs.DeadFuelMoisture_meanWtdTemperature(self)

    def pptRate(self):
        return _nfdrs.DeadFuelMoisture_pptRate(self)

    def state(self):
        return _nfdrs.DeadFuelMoisture_state(self)

    def stateName(self):
        return _nfdrs.DeadFuelMoisture_stateName(self)

    def surfaceMoisture(self):
        return _nfdrs.DeadFuelMoisture_surfaceMoisture(self)

    def surfaceTemperature(self):
        return _nfdrs.DeadFuelMoisture_surfaceTemperature(self)

    def updates(self):
        return _nfdrs.DeadFuelMoisture_updates(self)

    def adsorptionRate(self):
        return _nfdrs.DeadFuelMoisture_adsorptionRate(self)

    def desorptionRate(self):
        return _nfdrs.DeadFuelMoisture_desorptionRate(self)

    def diffusivitySteps(self):
        return _nfdrs.DeadFuelMoisture_diffusivitySteps(self)

    def maximumLocalMoisture(self):
        return _nfdrs.DeadFuelMoisture_maximumLocalMoisture(self)

    def moistureSteps(self):
        return _nfdrs.DeadFuelMoisture_moistureSteps(self)

    def planarHeatTransferRate(self):
        return _nfdrs.DeadFuelMoisture_planarHeatTransferRate(self)

    def rainfallRunoffFactor(self):
        return _nfdrs.DeadFuelMoisture_rainfallRunoffFactor(self)

    def stickDensity(self):
        return _nfdrs.DeadFuelMoisture_stickDensity(self)

    def stickLength(self):
        return _nfdrs.DeadFuelMoisture_stickLength(self)

    def stickNodes(self):
        return _nfdrs.DeadFuelMoisture_stickNodes(self)

    def waterFilmContribution(self):
        return _nfdrs.DeadFuelMoisture_waterFilmContribution(self)

    def initializeStick(self):
        return _nfdrs.DeadFuelMoisture_initializeStick(self)

    def setAdsorptionRate(self, adsorptionRate):
        return _nfdrs.DeadFuelMoisture_setAdsorptionRate(self, adsorptionRate)

    def setAllowRainstorm(self, allow=True):
        return _nfdrs.DeadFuelMoisture_setAllowRainstorm(self, allow)

    def setAllowRainfall2(self, allow=True):
        return _nfdrs.DeadFuelMoisture_setAllowRainfall2(self, allow)

    def setDesorptionRate(self, desorptionRate=0.06):
        return _nfdrs.DeadFuelMoisture_setDesorptionRate(self, desorptionRate)

    def setDiffusivitySteps(self, diffusivitySteps):
        return _nfdrs.DeadFuelMoisture_setDiffusivitySteps(self, diffusivitySteps)

    def setMaximumLocalMoisture(self, localMaxMc=0.6):
        return _nfdrs.DeadFuelMoisture_setMaximumLocalMoisture(self, localMaxMc)

    def setMoistureSteps(self, moistureSteps):
        return _nfdrs.DeadFuelMoisture_setMoistureSteps(self, moistureSteps)

    def setPertubateColumn(self, pertubate=True):
        return _nfdrs.DeadFuelMoisture_setPertubateColumn(self, pertubate)

    def setPlanarHeatTransferRate(self, planarHeatTransferRate):
        return _nfdrs.DeadFuelMoisture_setPlanarHeatTransferRate(self, planarHeatTransferRate)

    def setRainfallRunoffFactor(self, rainfallRunoffFactor):
        return _nfdrs.DeadFuelMoisture_setRainfallRunoffFactor(self, rainfallRunoffFactor)

    def setRandomSeed(self, randseed=0):
        return _nfdrs.DeadFuelMoisture_setRandomSeed(self, randseed)

    def setRampRai0(self, ramp=True):
        return _nfdrs.DeadFuelMoisture_setRampRai0(self, ramp)

    def setStickDensity(self, stickDensity=0.4):
        return _nfdrs.DeadFuelMoisture_setStickDensity(self, stickDensity)

    def setStickLength(self, stickLength=41.0):
        return _nfdrs.DeadFuelMoisture_setStickLength(self, stickLength)

    def setStickNodes(self, stickNodes=11):
        return _nfdrs.DeadFuelMoisture_setStickNodes(self, stickNodes)

    def setWaterFilmContribution(self, waterFilm=0.0):
        return _nfdrs.DeadFuelMoisture_setWaterFilmContribution(self, waterFilm)

    def setMoisture(self, initFM):
        return _nfdrs.DeadFuelMoisture_setMoisture(self, initFM)

    def eqmc(self, fTemp, fRH):
        return _nfdrs.DeadFuelMoisture_eqmc(self, fTemp, fRH)

    def initializeParameters(self, radius, name):
        return _nfdrs.DeadFuelMoisture_initializeParameters(self, radius, name)

    def GetState(self):
        return _nfdrs.DeadFuelMoisture_GetState(self)

    def SetState(self, state):
        return _nfdrs.DeadFuelMoisture_SetState(self, state)

# Register DeadFuelMoisture in _nfdrs:
_nfdrs.DeadFuelMoisture_swigregister(DeadFuelMoisture)
NOVALUE = _nfdrs.NOVALUE
RADPERDAY = _nfdrs.RADPERDAY
RADPERDEG = _nfdrs.RADPERDEG
MINDECL = _nfdrs.MINDECL
SECPERRAD = _nfdrs.SECPERRAD
DAYSOFF = _nfdrs.DAYSOFF
class LiveFuelMoisture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs.LiveFuelMoisture_swiginit(self, _nfdrs.new_LiveFuelMoisture(*args))

    def Initialize(self, Lat, IsHerb, IsAnnual):
        return _nfdrs.LiveFuelMoisture_Initialize(self, Lat, IsHerb, IsAnnual)

    def SetLimits(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
        return _nfdrs.LiveFuelMoisture_SetLimits(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

    def Update(self, TempF, MaxTempF, MinTempF, RH, minRH, Jday, RTPrcp, thisTime):
        return _nfdrs.LiveFuelMoisture_Update(self, TempF, MaxTempF, MinTempF, RH, minRH, Jday, RTPrcp, thisTime)

    def SetMAPeriod(self, MAPeriod):
        return _nfdrs.LiveFuelMoisture_SetMAPeriod(self, MAPeriod)

    def SetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal):
        return _nfdrs.LiveFuelMoisture_SetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal)

    def GetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal):
        return _nfdrs.LiveFuelMoisture_GetLFMParameters(self, MaxGSI, GreenupThreshold, MinLFMVal, MaxLFMVal)

    def SetNumPrecipDays(self, numDays):
        return _nfdrs.LiveFuelMoisture_SetNumPrecipDays(self, numDays)

    def GetNumPrecipDays(self):
        return _nfdrs.LiveFuelMoisture_GetNumPrecipDays(self)

    def GetMoisture(self, SnowDay=False):
        return _nfdrs.LiveFuelMoisture_GetMoisture(self, SnowDay)

    def CalcRunningAvgGSI(self):
        return _nfdrs.LiveFuelMoisture_CalcRunningAvgGSI(self)

    def CalcRunningAvgHerbFM(self, SnowDay=False):
        return _nfdrs.LiveFuelMoisture_CalcRunningAvgHerbFM(self, SnowDay)

    def ResetHerbState(self):
        return _nfdrs.LiveFuelMoisture_ResetHerbState(self)

    def CalcRunningAvgWoodyFM(self, SnowDay=False):
        return _nfdrs.LiveFuelMoisture_CalcRunningAvgWoodyFM(self, SnowDay)

    def CalcGSI(self, minRH, maxTempF, minTempF, RTPrcp, lat, doy):
        return _nfdrs.LiveFuelMoisture_CalcGSI(self, minRH, maxTempF, minTempF, RTPrcp, lat, doy)

    def CalcGSI_VPDAvg(self, RH, TempF, maxTempF, minTempF, RTPrcp, lat, doy):
        return _nfdrs.LiveFuelMoisture_CalcGSI_VPDAvg(self, RH, TempF, maxTempF, minTempF, RTPrcp, lat, doy)

    def GetTminInd(self, Tmin):
        return _nfdrs.LiveFuelMoisture_GetTminInd(self, Tmin)

    def GetVPDInd(self, VPD):
        return _nfdrs.LiveFuelMoisture_GetVPDInd(self, VPD)

    def GetDaylInd(self, Dayl):
        return _nfdrs.LiveFuelMoisture_GetDaylInd(self, Dayl)

    def GetPrcpInd(self, RTPrcp):
        return _nfdrs.LiveFuelMoisture_GetPrcpInd(self, RTPrcp)

    def CalcDayl(self, lat, yday):
        return _nfdrs.LiveFuelMoisture_CalcDayl(self, lat, yday)

    def CalcVPDavg(self, TempDewF, TempAvgF):
        return _nfdrs.LiveFuelMoisture_CalcVPDavg(self, TempDewF, TempAvgF)

    def CalcVPD(self, RH, TempF):
        return _nfdrs.LiveFuelMoisture_CalcVPD(self, RH, TempF)

    def CalcDPT(self, tempF, RH):
        return _nfdrs.LiveFuelMoisture_CalcDPT(self, tempF, RH)

    def CalcVP(self, tempF):
        return _nfdrs.LiveFuelMoisture_CalcVP(self, tempF)

    def GetMaxGSI(self):
        return _nfdrs.LiveFuelMoisture_GetMaxGSI(self)

    def GetGreenupThreshold(self):
        return _nfdrs.LiveFuelMoisture_GetGreenupThreshold(self)

    def GetMinLFMVal(self):
        return _nfdrs.LiveFuelMoisture_GetMinLFMVal(self)

    def GetMaxLFMVal(self):
        return _nfdrs.LiveFuelMoisture_GetMaxLFMVal(self)

    def SetUseVPDAvg(self, set):
        return _nfdrs.LiveFuelMoisture_SetUseVPDAvg(self, set)

    def GetUseVPDAvg(self):
        return _nfdrs.LiveFuelMoisture_GetUseVPDAvg(self)

    def GetIsAnnual(self):
        return _nfdrs.LiveFuelMoisture_GetIsAnnual(self)

    def GetState(self):
        return _nfdrs.LiveFuelMoisture_GetState(self)

    def SetState(self, state):
        return _nfdrs.LiveFuelMoisture_SetState(self, state)

    def SetUseRTPrecip(self, set):
        return _nfdrs.LiveFuelMoisture_SetUseRTPrecip(self, set)

    def GetUseRTPrecip(self):
        return _nfdrs.LiveFuelMoisture_GetUseRTPrecip(self)
    __swig_destroy__ = _nfdrs.delete_LiveFuelMoisture

# Register LiveFuelMoisture in _nfdrs:
_nfdrs.LiveFuelMoisture_swigregister(LiveFuelMoisture)
class DFMCalcState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs.DFMCalcState_swiginit(self, _nfdrs.new_DFMCalcState(*args))
    __swig_destroy__ = _nfdrs.delete_DFMCalcState

    def ReadState(self, _in):
        return _nfdrs.DFMCalcState_ReadState(self, _in)

    def SaveState(self, out):
        return _nfdrs.DFMCalcState_SaveState(self, out)
    m_JDay = property(_nfdrs.DFMCalcState_m_JDay_get, _nfdrs.DFMCalcState_m_JDay_set)
    m_Year = property(_nfdrs.DFMCalcState_m_Year_get, _nfdrs.DFMCalcState_m_Year_set)
    m_Month = property(_nfdrs.DFMCalcState_m_Month_get, _nfdrs.DFMCalcState_m_Month_set)
    m_Day = property(_nfdrs.DFMCalcState_m_Day_get, _nfdrs.DFMCalcState_m_Day_set)
    m_Hour = property(_nfdrs.DFMCalcState_m_Hour_get, _nfdrs.DFMCalcState_m_Hour_set)
    m_Min = property(_nfdrs.DFMCalcState_m_Min_get, _nfdrs.DFMCalcState_m_Min_set)
    m_Sec = property(_nfdrs.DFMCalcState_m_Sec_get, _nfdrs.DFMCalcState_m_Sec_set)
    m_obstime = property(_nfdrs.DFMCalcState_m_obstime_get, _nfdrs.DFMCalcState_m_obstime_set)
    m_bp1 = property(_nfdrs.DFMCalcState_m_bp1_get, _nfdrs.DFMCalcState_m_bp1_set)
    m_et = property(_nfdrs.DFMCalcState_m_et_get, _nfdrs.DFMCalcState_m_et_set)
    m_ha1 = property(_nfdrs.DFMCalcState_m_ha1_get, _nfdrs.DFMCalcState_m_ha1_set)
    m_rc1 = property(_nfdrs.DFMCalcState_m_rc1_get, _nfdrs.DFMCalcState_m_rc1_set)
    m_sv1 = property(_nfdrs.DFMCalcState_m_sv1_get, _nfdrs.DFMCalcState_m_sv1_set)
    m_ta1 = property(_nfdrs.DFMCalcState_m_ta1_get, _nfdrs.DFMCalcState_m_ta1_set)
    m_hf = property(_nfdrs.DFMCalcState_m_hf_get, _nfdrs.DFMCalcState_m_hf_set)
    m_wsa = property(_nfdrs.DFMCalcState_m_wsa_get, _nfdrs.DFMCalcState_m_wsa_set)
    m_rdur = property(_nfdrs.DFMCalcState_m_rdur_get, _nfdrs.DFMCalcState_m_rdur_set)
    m_ra1 = property(_nfdrs.DFMCalcState_m_ra1_get, _nfdrs.DFMCalcState_m_ra1_set)
    m_nodes = property(_nfdrs.DFMCalcState_m_nodes_get, _nfdrs.DFMCalcState_m_nodes_set)
    m_t = property(_nfdrs.DFMCalcState_m_t_get, _nfdrs.DFMCalcState_m_t_set)
    m_s = property(_nfdrs.DFMCalcState_m_s_get, _nfdrs.DFMCalcState_m_s_set)
    m_d = property(_nfdrs.DFMCalcState_m_d_get, _nfdrs.DFMCalcState_m_d_set)
    m_w = property(_nfdrs.DFMCalcState_m_w_get, _nfdrs.DFMCalcState_m_w_set)

# Register DFMCalcState in _nfdrs:
_nfdrs.DFMCalcState_swigregister(DFMCalcState)
class LFMCalcState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs.LFMCalcState_swiginit(self, _nfdrs.new_LFMCalcState(*args))
    __swig_destroy__ = _nfdrs.delete_LFMCalcState

    def ReadState(self, _in):
        return _nfdrs.LFMCalcState_ReadState(self, _in)

    def SaveState(self, out):
        return _nfdrs.LFMCalcState_SaveState(self, out)
    m_lastUpdateTime = property(_nfdrs.LFMCalcState_m_lastUpdateTime_get, _nfdrs.LFMCalcState_m_lastUpdateTime_set)
    m_UseVPDAvg = property(_nfdrs.LFMCalcState_m_UseVPDAvg_get, _nfdrs.LFMCalcState_m_UseVPDAvg_set)
    m_IsHerb = property(_nfdrs.LFMCalcState_m_IsHerb_get, _nfdrs.LFMCalcState_m_IsHerb_set)
    m_IsAnnual = property(_nfdrs.LFMCalcState_m_IsAnnual_get, _nfdrs.LFMCalcState_m_IsAnnual_set)
    m_LFIdaysAvg = property(_nfdrs.LFMCalcState_m_LFIdaysAvg_get, _nfdrs.LFMCalcState_m_LFIdaysAvg_set)
    m_nDaysPrecip = property(_nfdrs.LFMCalcState_m_nDaysPrecip_get, _nfdrs.LFMCalcState_m_nDaysPrecip_set)
    m_Lat = property(_nfdrs.LFMCalcState_m_Lat_get, _nfdrs.LFMCalcState_m_Lat_set)
    m_TminMin = property(_nfdrs.LFMCalcState_m_TminMin_get, _nfdrs.LFMCalcState_m_TminMin_set)
    m_TminMax = property(_nfdrs.LFMCalcState_m_TminMax_get, _nfdrs.LFMCalcState_m_TminMax_set)
    m_VPDMin = property(_nfdrs.LFMCalcState_m_VPDMin_get, _nfdrs.LFMCalcState_m_VPDMin_set)
    m_VPDMax = property(_nfdrs.LFMCalcState_m_VPDMax_get, _nfdrs.LFMCalcState_m_VPDMax_set)
    m_DaylenMin = property(_nfdrs.LFMCalcState_m_DaylenMin_get, _nfdrs.LFMCalcState_m_DaylenMin_set)
    m_DaylenMax = property(_nfdrs.LFMCalcState_m_DaylenMax_get, _nfdrs.LFMCalcState_m_DaylenMax_set)
    m_MaxGSI = property(_nfdrs.LFMCalcState_m_MaxGSI_get, _nfdrs.LFMCalcState_m_MaxGSI_set)
    m_GreenupThreshold = property(_nfdrs.LFMCalcState_m_GreenupThreshold_get, _nfdrs.LFMCalcState_m_GreenupThreshold_set)
    m_MaxLFMVal = property(_nfdrs.LFMCalcState_m_MaxLFMVal_get, _nfdrs.LFMCalcState_m_MaxLFMVal_set)
    m_MinLFMVal = property(_nfdrs.LFMCalcState_m_MinLFMVal_get, _nfdrs.LFMCalcState_m_MinLFMVal_set)
    m_Slope = property(_nfdrs.LFMCalcState_m_Slope_get, _nfdrs.LFMCalcState_m_Slope_set)
    m_Intercept = property(_nfdrs.LFMCalcState_m_Intercept_get, _nfdrs.LFMCalcState_m_Intercept_set)
    m_hasGreenedUpThisYear = property(_nfdrs.LFMCalcState_m_hasGreenedUpThisYear_get, _nfdrs.LFMCalcState_m_hasGreenedUpThisYear_set)
    m_hasExceeded120ThisYear = property(_nfdrs.LFMCalcState_m_hasExceeded120ThisYear_get, _nfdrs.LFMCalcState_m_hasExceeded120ThisYear_set)
    m_canIncreaseHerb = property(_nfdrs.LFMCalcState_m_canIncreaseHerb_get, _nfdrs.LFMCalcState_m_canIncreaseHerb_set)
    lastHerbFM = property(_nfdrs.LFMCalcState_lastHerbFM_get, _nfdrs.LFMCalcState_lastHerbFM_set)
    m_useRTPrecip = property(_nfdrs.LFMCalcState_m_useRTPrecip_get, _nfdrs.LFMCalcState_m_useRTPrecip_set)
    m_pcpMin = property(_nfdrs.LFMCalcState_m_pcpMin_get, _nfdrs.LFMCalcState_m_pcpMin_set)
    m_pcpMax = property(_nfdrs.LFMCalcState_m_pcpMax_get, _nfdrs.LFMCalcState_m_pcpMax_set)
    m_qGSI = property(_nfdrs.LFMCalcState_m_qGSI_get, _nfdrs.LFMCalcState_m_qGSI_set)

# Register LFMCalcState in _nfdrs:
_nfdrs.LFMCalcState_swigregister(LFMCalcState)
class NFDRS4State(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs.NFDRS4State_swiginit(self, _nfdrs.new_NFDRS4State(*args))
    __swig_destroy__ = _nfdrs.delete_NFDRS4State

    def LoadState(self, fileName):
        return _nfdrs.NFDRS4State_LoadState(self, fileName)

    def SaveState(self, fileName):
        return _nfdrs.NFDRS4State_SaveState(self, fileName)
    m_NFDRSVersion = property(_nfdrs.NFDRS4State_m_NFDRSVersion_get, _nfdrs.NFDRS4State_m_NFDRSVersion_set)
    fm1State = property(_nfdrs.NFDRS4State_fm1State_get, _nfdrs.NFDRS4State_fm1State_set)
    fm10State = property(_nfdrs.NFDRS4State_fm10State_get, _nfdrs.NFDRS4State_fm10State_set)
    fm100State = property(_nfdrs.NFDRS4State_fm100State_get, _nfdrs.NFDRS4State_fm100State_set)
    fm1000State = property(_nfdrs.NFDRS4State_fm1000State_get, _nfdrs.NFDRS4State_fm1000State_set)
    gsiState = property(_nfdrs.NFDRS4State_gsiState_get, _nfdrs.NFDRS4State_gsiState_set)
    herbState = property(_nfdrs.NFDRS4State_herbState_get, _nfdrs.NFDRS4State_herbState_set)
    woodyState = property(_nfdrs.NFDRS4State_woodyState_get, _nfdrs.NFDRS4State_woodyState_set)
    m_Lat = property(_nfdrs.NFDRS4State_m_Lat_get, _nfdrs.NFDRS4State_m_Lat_set)
    m_YesterdayJDay = property(_nfdrs.NFDRS4State_m_YesterdayJDay_get, _nfdrs.NFDRS4State_m_YesterdayJDay_set)
    m_SlopeClass = property(_nfdrs.NFDRS4State_m_SlopeClass_get, _nfdrs.NFDRS4State_m_SlopeClass_set)
    m_FuelModel = property(_nfdrs.NFDRS4State_m_FuelModel_get, _nfdrs.NFDRS4State_m_FuelModel_set)
    m_MC1 = property(_nfdrs.NFDRS4State_m_MC1_get, _nfdrs.NFDRS4State_m_MC1_set)
    m_MC10 = property(_nfdrs.NFDRS4State_m_MC10_get, _nfdrs.NFDRS4State_m_MC10_set)
    m_MC100 = property(_nfdrs.NFDRS4State_m_MC100_get, _nfdrs.NFDRS4State_m_MC100_set)
    m_MC1000 = property(_nfdrs.NFDRS4State_m_MC1000_get, _nfdrs.NFDRS4State_m_MC1000_set)
    m_MCWOOD = property(_nfdrs.NFDRS4State_m_MCWOOD_get, _nfdrs.NFDRS4State_m_MCWOOD_set)
    m_MCHERB = property(_nfdrs.NFDRS4State_m_MCHERB_get, _nfdrs.NFDRS4State_m_MCHERB_set)
    m_PrevYear = property(_nfdrs.NFDRS4State_m_PrevYear_get, _nfdrs.NFDRS4State_m_PrevYear_set)
    m_KBDI = property(_nfdrs.NFDRS4State_m_KBDI_get, _nfdrs.NFDRS4State_m_KBDI_set)
    m_YKBDI = property(_nfdrs.NFDRS4State_m_YKBDI_get, _nfdrs.NFDRS4State_m_YKBDI_set)
    m_StartKBDI = property(_nfdrs.NFDRS4State_m_StartKBDI_get, _nfdrs.NFDRS4State_m_StartKBDI_set)
    m_KBDIThreshold = property(_nfdrs.NFDRS4State_m_KBDIThreshold_get, _nfdrs.NFDRS4State_m_KBDIThreshold_set)
    m_CummPrecip = property(_nfdrs.NFDRS4State_m_CummPrecip_get, _nfdrs.NFDRS4State_m_CummPrecip_set)
    m_AvgPrecip = property(_nfdrs.NFDRS4State_m_AvgPrecip_get, _nfdrs.NFDRS4State_m_AvgPrecip_set)
    m_UseLoadTransfer = property(_nfdrs.NFDRS4State_m_UseLoadTransfer_get, _nfdrs.NFDRS4State_m_UseLoadTransfer_set)
    m_UseCuring = property(_nfdrs.NFDRS4State_m_UseCuring_get, _nfdrs.NFDRS4State_m_UseCuring_set)
    m_FuelTemperature = property(_nfdrs.NFDRS4State_m_FuelTemperature_get, _nfdrs.NFDRS4State_m_FuelTemperature_set)
    m_BI = property(_nfdrs.NFDRS4State_m_BI_get, _nfdrs.NFDRS4State_m_BI_set)
    m_ERC = property(_nfdrs.NFDRS4State_m_ERC_get, _nfdrs.NFDRS4State_m_ERC_set)
    m_SC = property(_nfdrs.NFDRS4State_m_SC_get, _nfdrs.NFDRS4State_m_SC_set)
    m_IC = property(_nfdrs.NFDRS4State_m_IC_get, _nfdrs.NFDRS4State_m_IC_set)
    m_GSI = property(_nfdrs.NFDRS4State_m_GSI_get, _nfdrs.NFDRS4State_m_GSI_set)
    m_nConsectiveSnowDays = property(_nfdrs.NFDRS4State_m_nConsectiveSnowDays_get, _nfdrs.NFDRS4State_m_nConsectiveSnowDays_set)
    m_lastUtcUpdateTime = property(_nfdrs.NFDRS4State_m_lastUtcUpdateTime_get, _nfdrs.NFDRS4State_m_lastUtcUpdateTime_set)
    m_lastDailyUpdateTime = property(_nfdrs.NFDRS4State_m_lastDailyUpdateTime_get, _nfdrs.NFDRS4State_m_lastDailyUpdateTime_set)
    m_qPrecip = property(_nfdrs.NFDRS4State_m_qPrecip_get, _nfdrs.NFDRS4State_m_qPrecip_set)
    m_qHourlyPrecip = property(_nfdrs.NFDRS4State_m_qHourlyPrecip_get, _nfdrs.NFDRS4State_m_qHourlyPrecip_set)
    m_qHourlyTemp = property(_nfdrs.NFDRS4State_m_qHourlyTemp_get, _nfdrs.NFDRS4State_m_qHourlyTemp_set)
    m_qHourlyRH = property(_nfdrs.NFDRS4State_m_qHourlyRH_get, _nfdrs.NFDRS4State_m_qHourlyRH_set)

# Register NFDRS4State in _nfdrs:
_nfdrs.NFDRS4State_swigregister(NFDRS4State)
class NFDRS4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    #def __init__(self, *args):
    #    _nfdrs.NFDRS4_swiginit(self, _nfdrs.new_NFDRS4(*args))
    __swig_destroy__ = _nfdrs.delete_NFDRS4
    def __init__(self, *args): 
        this = _nfdrs.new_NFDRS4(*args)
        try: self.this.append(this)
        except: self.this = this
    def __enter__(self,*args):
        return self
    def __exit__(self,exc_type,value,traceback):
        self = None
        __swig_destroy__ = _nfdrs.delete_NFDRS4
        #print("\nInside __exit__")
        #print("\nExecution type:", exc_type)
        #print("\nExecution value:", value)
        #print("\nTraceback:",traceback)

    def Init(self, Lat, FuelModel, SlopeClass, AvgAnnPrecip, LT, Cure, isAnnual, kbdiThreshold, RegObsHour=13):
        return _nfdrs.NFDRS4_Init(self, Lat, FuelModel, SlopeClass, AvgAnnPrecip, LT, Cure, isAnnual, kbdiThreshold, RegObsHour)

    def Update(self, *args):
        return _nfdrs.NFDRS4_Update(self, *args)

    def UpdateDaily(self, Year, Month, Day, Julian, Temp, MinTemp, MaxTemp, RH, MinRH, pcp24, WS, fMC1, fMC10, fMC100, fMC1000, fuelTemp, SnowDay):
        return _nfdrs.NFDRS4_UpdateDaily(self, Year, Month, Day, Julian, Temp, MinTemp, MaxTemp, RH, MinRH, pcp24, WS, fMC1, fMC10, fMC100, fMC1000, fuelTemp, SnowDay)

    def iSetFuelModel(self, cFM):
        return _nfdrs.NFDRS4_iSetFuelModel(self, cFM)

    def iSetFuelMoistures(self, fMC1, fMC10, fMC100, fMC1000, fMCWood, fMCHerb, fuelTempC):
        return _nfdrs.NFDRS4_iSetFuelMoistures(self, fMC1, fMC10, fMC100, fMC1000, fMCWood, fMCHerb, fuelTempC)

    def iCalcIndexes(self, iWS, iSlopeCls, fSC, fERC, fBI, fIC, fGSI=-999, fKBDI=-999):
        return _nfdrs.NFDRS4_iCalcIndexes(self, iWS, iSlopeCls, fSC, fERC, fBI, fIC, fGSI, fKBDI)

    def iCalcKBDI(self, fPrecipAmt, iMaxTemp, fCummPrecip, iYKBDI, fAvgPrecip):
        return _nfdrs.NFDRS4_iCalcKBDI(self, fPrecipAmt, iMaxTemp, fCummPrecip, iYKBDI, fAvgPrecip)

    def Cure(self, fGSI=-999, fGreenupThreshold=0.5, fGSIMax=1.0):
        return _nfdrs.NFDRS4_Cure(self, fGSI, fGreenupThreshold, fGSIMax)

    def SetGSIParams(self, MaxGSI, GreenupThreshold, TminMin=-2.0, TminMax=5.0, VPDMin=900, VPDMax=4100, DaylMin=36000, DaylMax=39600, MAPeriod=21, UseVPDAvg=False, nPrecipDays=30, rtPrecipMin=0.5, rtPrecipMax=1.5, UseRTPrecip=False):
        return _nfdrs.NFDRS4_SetGSIParams(self, MaxGSI, GreenupThreshold, TminMin, TminMax, VPDMin, VPDMax, DaylMin, DaylMax, MAPeriod, UseVPDAvg, nPrecipDays, rtPrecipMin, rtPrecipMax, UseRTPrecip)

    def SetHerbGSIparams(self, MaxGSI, GreenupThreshold, TminMin=-2.0, TminMax=5.0, VPDMin=900, VPDMax=4100, DaylMin=36000, DaylMax=39600, MAPeriod=21, UseVPDAvg=False, nPrecipDays=30, rtPrecipMin=0.5, rtPrecipMax=1.5, UseRTPrecip=False, herbMin=30.0, herbMax=250.0):
        return _nfdrs.NFDRS4_SetHerbGSIparams(self, MaxGSI, GreenupThreshold, TminMin, TminMax, VPDMin, VPDMax, DaylMin, DaylMax, MAPeriod, UseVPDAvg, nPrecipDays, rtPrecipMin, rtPrecipMax, UseRTPrecip, herbMin, herbMax)

    def SetWoodyGSIparams(self, MaxGSI, GreenupThreshold, TminMin=-2.0, TminMax=5.0, VPDMin=900, VPDMax=4100, DaylMin=36000, DaylMax=39600, MAPeriod=21, UseVPDAvg=False, nPrecipDays=30, rtPrecipMin=0.5, rtPrecipMax=1.5, UseRTPrecip=False, woodyMin=60.0, woodyMax=200.0):
        return _nfdrs.NFDRS4_SetWoodyGSIparams(self, MaxGSI, GreenupThreshold, TminMin, TminMax, VPDMin, VPDMax, DaylMin, DaylMax, MAPeriod, UseVPDAvg, nPrecipDays, rtPrecipMin, rtPrecipMax, UseRTPrecip, woodyMin, woodyMax)

    def SetOneHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate):
        return _nfdrs.NFDRS4_SetOneHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def SetTenHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate):
        return _nfdrs.NFDRS4_SetTenHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def SetHundredHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate):
        return _nfdrs.NFDRS4_SetHundredHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def SetThousandHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate):
        return _nfdrs.NFDRS4_SetThousandHourParams(self, radius, adsorptionRate, maxLocalMoisture, stickDensity, desorptionRate)

    def Set1HourRadius(self, radius):
        return _nfdrs.NFDRS4_Set1HourRadius(self, radius)

    def Set1HourAdsorptionRate(self, adsorptionRate):
        return _nfdrs.NFDRS4_Set1HourAdsorptionRate(self, adsorptionRate)

    def Set1HourStickDensity(self, stickDensity):
        return _nfdrs.NFDRS4_Set1HourStickDensity(self, stickDensity)

    def Set1HourMaxLocalMoisture(self, maxLocalMoisture):
        return _nfdrs.NFDRS4_Set1HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set1HourDesorptionRate(self, desorptionRate):
        return _nfdrs.NFDRS4_Set1HourDesorptionRate(self, desorptionRate)

    def Set10HourRadius(self, radius):
        return _nfdrs.NFDRS4_Set10HourRadius(self, radius)

    def Set10HourAdsorptionRate(self, adsorptionRate):
        return _nfdrs.NFDRS4_Set10HourAdsorptionRate(self, adsorptionRate)

    def Set10HourStickDensity(self, stickDensity):
        return _nfdrs.NFDRS4_Set10HourStickDensity(self, stickDensity)

    def Set10HourMaxLocalMoisture(self, maxLocalMoisture):
        return _nfdrs.NFDRS4_Set10HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set10HourDesorptionRate(self, desorptionRate):
        return _nfdrs.NFDRS4_Set10HourDesorptionRate(self, desorptionRate)

    def Set100HourRadius(self, radius):
        return _nfdrs.NFDRS4_Set100HourRadius(self, radius)

    def Set100HourAdsorptionRate(self, adsorptionRate):
        return _nfdrs.NFDRS4_Set100HourAdsorptionRate(self, adsorptionRate)

    def Set100HourStickDensity(self, stickDensity):
        return _nfdrs.NFDRS4_Set100HourStickDensity(self, stickDensity)

    def Set100HourMaxLocalMoisture(self, maxLocalMoisture):
        return _nfdrs.NFDRS4_Set100HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set100HourDesorptionRate(self, desorptionRate):
        return _nfdrs.NFDRS4_Set100HourDesorptionRate(self, desorptionRate)

    def Set1000HourRadius(self, radius):
        return _nfdrs.NFDRS4_Set1000HourRadius(self, radius)

    def Set1000HourAdsorptionRate(self, adsorptionRate):
        return _nfdrs.NFDRS4_Set1000HourAdsorptionRate(self, adsorptionRate)

    def Set1000HourStickDensity(self, stickDensity):
        return _nfdrs.NFDRS4_Set1000HourStickDensity(self, stickDensity)

    def Set1000HourMaxLocalMoisture(self, maxLocalMoisture):
        return _nfdrs.NFDRS4_Set1000HourMaxLocalMoisture(self, maxLocalMoisture)

    def Set1000HourDesorptionRate(self, desorptionRate):
        return _nfdrs.NFDRS4_Set1000HourDesorptionRate(self, desorptionRate)

    def SetStartKBDI(self, sKBDI):
        return _nfdrs.NFDRS4_SetStartKBDI(self, sKBDI)

    def GetStartKBDI(self):
        return _nfdrs.NFDRS4_GetStartKBDI(self)

    def SetSCMax(self, maxSC):
        return _nfdrs.NFDRS4_SetSCMax(self, maxSC)

    def GetSCMax(self):
        return _nfdrs.NFDRS4_GetSCMax(self)

    def SetMxdHumid(self, isHumid):
        return _nfdrs.NFDRS4_SetMxdHumid(self, isHumid)

    def GetMxdHumid(self):
        return _nfdrs.NFDRS4_GetMxdHumid(self)

    def GetFuelTemperature(self):
        return _nfdrs.NFDRS4_GetFuelTemperature(self)

    def GetXDaysPrecipitation(self, nDays):
        return _nfdrs.NFDRS4_GetXDaysPrecipitation(self, nDays)

    def ReadState(self, fileName):
        return _nfdrs.NFDRS4_ReadState(self, fileName)

    def SaveState(self, fileName):
        return _nfdrs.NFDRS4_SaveState(self, fileName)

    def LoadState(self, state):
        return _nfdrs.NFDRS4_LoadState(self, state)
    nPrecipQueueDays = property(_nfdrs.NFDRS4_nPrecipQueueDays_get)
    nHoursPerDay = property(_nfdrs.NFDRS4_nHoursPerDay_get)

    def GetMinTemp(self):
        return _nfdrs.NFDRS4_GetMinTemp(self)

    def GetMaxTemp(self):
        return _nfdrs.NFDRS4_GetMaxTemp(self)

    def GetMinRH(self):
        return _nfdrs.NFDRS4_GetMinRH(self)

    def GetPcp24(self):
        return _nfdrs.NFDRS4_GetPcp24(self)
    CTA = property(_nfdrs.NFDRS4_CTA_get, _nfdrs.NFDRS4_CTA_set)
    Lat = property(_nfdrs.NFDRS4_Lat_get, _nfdrs.NFDRS4_Lat_set)
    NFDRSVersion = property(_nfdrs.NFDRS4_NFDRSVersion_get, _nfdrs.NFDRS4_NFDRSVersion_set)
    YesterdayJDay = property(_nfdrs.NFDRS4_YesterdayJDay_get, _nfdrs.NFDRS4_YesterdayJDay_set)
    SlopeClass = property(_nfdrs.NFDRS4_SlopeClass_get, _nfdrs.NFDRS4_SlopeClass_set)
    OneHourFM = property(_nfdrs.NFDRS4_OneHourFM_get, _nfdrs.NFDRS4_OneHourFM_set)
    TenHourFM = property(_nfdrs.NFDRS4_TenHourFM_get, _nfdrs.NFDRS4_TenHourFM_set)
    HundredHourFM = property(_nfdrs.NFDRS4_HundredHourFM_get, _nfdrs.NFDRS4_HundredHourFM_set)
    ThousandHourFM = property(_nfdrs.NFDRS4_ThousandHourFM_get, _nfdrs.NFDRS4_ThousandHourFM_set)
    GsiFM = property(_nfdrs.NFDRS4_GsiFM_get, _nfdrs.NFDRS4_GsiFM_set)
    HerbFM = property(_nfdrs.NFDRS4_HerbFM_get, _nfdrs.NFDRS4_HerbFM_set)
    WoodyFM = property(_nfdrs.NFDRS4_WoodyFM_get, _nfdrs.NFDRS4_WoodyFM_set)
    FuelModel = property(_nfdrs.NFDRS4_FuelModel_get, _nfdrs.NFDRS4_FuelModel_set)
    SG1 = property(_nfdrs.NFDRS4_SG1_get, _nfdrs.NFDRS4_SG1_set)
    SG10 = property(_nfdrs.NFDRS4_SG10_get, _nfdrs.NFDRS4_SG10_set)
    SG100 = property(_nfdrs.NFDRS4_SG100_get, _nfdrs.NFDRS4_SG100_set)
    SG1000 = property(_nfdrs.NFDRS4_SG1000_get, _nfdrs.NFDRS4_SG1000_set)
    SGWOOD = property(_nfdrs.NFDRS4_SGWOOD_get, _nfdrs.NFDRS4_SGWOOD_set)
    SGHERB = property(_nfdrs.NFDRS4_SGHERB_get, _nfdrs.NFDRS4_SGHERB_set)
    W1 = property(_nfdrs.NFDRS4_W1_get, _nfdrs.NFDRS4_W1_set)
    W10 = property(_nfdrs.NFDRS4_W10_get, _nfdrs.NFDRS4_W10_set)
    W100 = property(_nfdrs.NFDRS4_W100_get, _nfdrs.NFDRS4_W100_set)
    W1000 = property(_nfdrs.NFDRS4_W1000_get, _nfdrs.NFDRS4_W1000_set)
    WWOOD = property(_nfdrs.NFDRS4_WWOOD_get, _nfdrs.NFDRS4_WWOOD_set)
    WHERB = property(_nfdrs.NFDRS4_WHERB_get, _nfdrs.NFDRS4_WHERB_set)
    WDROUGHT = property(_nfdrs.NFDRS4_WDROUGHT_get, _nfdrs.NFDRS4_WDROUGHT_set)
    W1P = property(_nfdrs.NFDRS4_W1P_get, _nfdrs.NFDRS4_W1P_set)
    WHERBP = property(_nfdrs.NFDRS4_WHERBP_get, _nfdrs.NFDRS4_WHERBP_set)
    WTOT = property(_nfdrs.NFDRS4_WTOT_get, _nfdrs.NFDRS4_WTOT_set)
    L1 = property(_nfdrs.NFDRS4_L1_get, _nfdrs.NFDRS4_L1_set)
    L10 = property(_nfdrs.NFDRS4_L10_get, _nfdrs.NFDRS4_L10_set)
    L100 = property(_nfdrs.NFDRS4_L100_get, _nfdrs.NFDRS4_L100_set)
    L1000 = property(_nfdrs.NFDRS4_L1000_get, _nfdrs.NFDRS4_L1000_set)
    LWOOD = property(_nfdrs.NFDRS4_LWOOD_get, _nfdrs.NFDRS4_LWOOD_set)
    LHERB = property(_nfdrs.NFDRS4_LHERB_get, _nfdrs.NFDRS4_LHERB_set)
    LDROUGHT = property(_nfdrs.NFDRS4_LDROUGHT_get, _nfdrs.NFDRS4_LDROUGHT_set)
    DroughtUnit = property(_nfdrs.NFDRS4_DroughtUnit_get, _nfdrs.NFDRS4_DroughtUnit_set)
    fctCur = property(_nfdrs.NFDRS4_fctCur_get, _nfdrs.NFDRS4_fctCur_set)
    DEPTH = property(_nfdrs.NFDRS4_DEPTH_get, _nfdrs.NFDRS4_DEPTH_set)
    WNDFC = property(_nfdrs.NFDRS4_WNDFC_get, _nfdrs.NFDRS4_WNDFC_set)
    MXD = property(_nfdrs.NFDRS4_MXD_get, _nfdrs.NFDRS4_MXD_set)
    HD = property(_nfdrs.NFDRS4_HD_get, _nfdrs.NFDRS4_HD_set)
    SCM = property(_nfdrs.NFDRS4_SCM_get, _nfdrs.NFDRS4_SCM_set)
    MC1 = property(_nfdrs.NFDRS4_MC1_get, _nfdrs.NFDRS4_MC1_set)
    MC10 = property(_nfdrs.NFDRS4_MC10_get, _nfdrs.NFDRS4_MC10_set)
    MC100 = property(_nfdrs.NFDRS4_MC100_get, _nfdrs.NFDRS4_MC100_set)
    MC1000 = property(_nfdrs.NFDRS4_MC1000_get, _nfdrs.NFDRS4_MC1000_set)
    MCWOOD = property(_nfdrs.NFDRS4_MCWOOD_get, _nfdrs.NFDRS4_MCWOOD_set)
    MCHERB = property(_nfdrs.NFDRS4_MCHERB_get, _nfdrs.NFDRS4_MCHERB_set)
    BI = property(_nfdrs.NFDRS4_BI_get, _nfdrs.NFDRS4_BI_set)
    ERC = property(_nfdrs.NFDRS4_ERC_get, _nfdrs.NFDRS4_ERC_set)
    SC = property(_nfdrs.NFDRS4_SC_get, _nfdrs.NFDRS4_SC_set)
    IC = property(_nfdrs.NFDRS4_IC_get, _nfdrs.NFDRS4_IC_set)
    PrevYear = property(_nfdrs.NFDRS4_PrevYear_get, _nfdrs.NFDRS4_PrevYear_set)
    KBDI = property(_nfdrs.NFDRS4_KBDI_get, _nfdrs.NFDRS4_KBDI_set)
    YKBDI = property(_nfdrs.NFDRS4_YKBDI_get, _nfdrs.NFDRS4_YKBDI_set)
    StartKBDI = property(_nfdrs.NFDRS4_StartKBDI_get, _nfdrs.NFDRS4_StartKBDI_set)
    KBDIThreshold = property(_nfdrs.NFDRS4_KBDIThreshold_get, _nfdrs.NFDRS4_KBDIThreshold_set)
    CummPrecip = property(_nfdrs.NFDRS4_CummPrecip_get, _nfdrs.NFDRS4_CummPrecip_set)
    AvgPrecip = property(_nfdrs.NFDRS4_AvgPrecip_get, _nfdrs.NFDRS4_AvgPrecip_set)
    UseLoadTransfer = property(_nfdrs.NFDRS4_UseLoadTransfer_get, _nfdrs.NFDRS4_UseLoadTransfer_set)
    UseCuring = property(_nfdrs.NFDRS4_UseCuring_get, _nfdrs.NFDRS4_UseCuring_set)
    SnowCovered = property(_nfdrs.NFDRS4_SnowCovered_get, _nfdrs.NFDRS4_SnowCovered_set)
    WTMCD = property(_nfdrs.NFDRS4_WTMCD_get, _nfdrs.NFDRS4_WTMCD_set)
    WTMCL = property(_nfdrs.NFDRS4_WTMCL_get, _nfdrs.NFDRS4_WTMCL_set)
    WTMCDE = property(_nfdrs.NFDRS4_WTMCDE_get, _nfdrs.NFDRS4_WTMCDE_set)
    WTMCLE = property(_nfdrs.NFDRS4_WTMCLE_get, _nfdrs.NFDRS4_WTMCLE_set)
    mxdHumid = property(_nfdrs.NFDRS4_mxdHumid_get, _nfdrs.NFDRS4_mxdHumid_set)
    FuelTemperature = property(_nfdrs.NFDRS4_FuelTemperature_get, _nfdrs.NFDRS4_FuelTemperature_set)
    m_GSI = property(_nfdrs.NFDRS4_m_GSI_get, _nfdrs.NFDRS4_m_GSI_set)
    nConsectiveSnowDays = property(_nfdrs.NFDRS4_nConsectiveSnowDays_get, _nfdrs.NFDRS4_nConsectiveSnowDays_set)
    m_regObsHour = property(_nfdrs.NFDRS4_m_regObsHour_get, _nfdrs.NFDRS4_m_regObsHour_set)
    utcHourDiff = property(_nfdrs.NFDRS4_utcHourDiff_get, _nfdrs.NFDRS4_utcHourDiff_set)
    lastUtcUpdateTime = property(_nfdrs.NFDRS4_lastUtcUpdateTime_get, _nfdrs.NFDRS4_lastUtcUpdateTime_set)
    lastDailyUpdateTime = property(_nfdrs.NFDRS4_lastDailyUpdateTime_get, _nfdrs.NFDRS4_lastDailyUpdateTime_set)
    qPrecip = property(_nfdrs.NFDRS4_qPrecip_get, _nfdrs.NFDRS4_qPrecip_set)
    qHourlyPrecip = property(_nfdrs.NFDRS4_qHourlyPrecip_get, _nfdrs.NFDRS4_qHourlyPrecip_set)
    qHourlyTemp = property(_nfdrs.NFDRS4_qHourlyTemp_get, _nfdrs.NFDRS4_qHourlyTemp_set)
    qHourlyRH = property(_nfdrs.NFDRS4_qHourlyRH_get, _nfdrs.NFDRS4_qHourlyRH_set)

# Register NFDRS4 in _nfdrs:
_nfdrs.NFDRS4_swigregister(NFDRS4)
class UTCTimeException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs.UTCTimeException_swiginit(self, _nfdrs.new_UTCTimeException(*args))
    __swig_destroy__ = _nfdrs.delete_UTCTimeException

    def what(self):
        return _nfdrs.UTCTimeException_what(self)

# Register UTCTimeException in _nfdrs:
_nfdrs.UTCTimeException_swigregister(UTCTimeException)
class bad_time_init(UTCTimeException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _nfdrs.bad_time_init_swiginit(self, _nfdrs.new_bad_time_init())
    __swig_destroy__ = _nfdrs.delete_bad_time_init

# Register bad_time_init in _nfdrs:
_nfdrs.bad_time_init_swigregister(bad_time_init)
class bad_time(UTCTimeException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _nfdrs.bad_time_swiginit(self, _nfdrs.new_bad_time())
    __swig_destroy__ = _nfdrs.delete_bad_time

# Register bad_time in _nfdrs:
_nfdrs.bad_time_swigregister(bad_time)
class invalid_date(UTCTimeException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _nfdrs.invalid_date_swiginit(self, _nfdrs.new_invalid_date(msg))
    __swig_destroy__ = _nfdrs.delete_invalid_date

# Register invalid_date in _nfdrs:
_nfdrs.invalid_date_swigregister(invalid_date)

def validate_date(year, month, day, hour, minute, second):
    return _nfdrs.validate_date(year, month, day, hour, minute, second)

def get_day_diff():
    return _nfdrs.get_day_diff()

def get_hour_diff():
    return _nfdrs.get_hour_diff()

def get_sec_diff():
    return _nfdrs.get_sec_diff()

def tm_compare(first, second):
    return _nfdrs.tm_compare(first, second)

def tm_intraday_secs_diff(first, second):
    return _nfdrs.tm_intraday_secs_diff(first, second)

def is_leap_year(year):
    return _nfdrs.is_leap_year(year)

def tm_increment_day(changing_tm, quantity=1):
    return _nfdrs.tm_increment_day(changing_tm, quantity)

def tm_increment_hour(changing_tm, quantity=1):
    return _nfdrs.tm_increment_hour(changing_tm, quantity)

def tm_increment_minute(changing_tm, quantity=1):
    return _nfdrs.tm_increment_minute(changing_tm, quantity)

def tm_increment_second(changing_tm, quantity=1):
    return _nfdrs.tm_increment_second(changing_tm, quantity)

def tm_decrement_day(changing_tm, quantity=1):
    return _nfdrs.tm_decrement_day(changing_tm, quantity)

def tm_decrement_hour(changing_tm, quantity=1):
    return _nfdrs.tm_decrement_hour(changing_tm, quantity)

def tm_decrement_minute(changing_tm, quantity=1):
    return _nfdrs.tm_decrement_minute(changing_tm, quantity)

def tm_decrement_second(changing_tm, quantity=1):
    return _nfdrs.tm_decrement_second(changing_tm, quantity)

def check_utc_timestamp(check_time, secs_diff, year, month, day, hour, minute, second):
    return _nfdrs.check_utc_timestamp(check_time, secs_diff, year, month, day, hour, minute, second)

def get_utc_timestamp(year, month, day, hour, minute, second):
    return _nfdrs.get_utc_timestamp(year, month, day, hour, minute, second)

def get_utc_timestamp_sec_diff(check_time, year, month, day, hour, minute, second):
    return _nfdrs.get_utc_timestamp_sec_diff(check_time, year, month, day, hour, minute, second)
class UTCTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nfdrs.UTCTime_swiginit(self, _nfdrs.new_UTCTime(*args))

    def get_tm(self):
        return _nfdrs.UTCTime_get_tm(self)

    def time_string(self):
        return _nfdrs.UTCTime_time_string(self)

    def time_string_inet(self):
        return _nfdrs.UTCTime_time_string_inet(self)

    def timestamp(self):
        return _nfdrs.UTCTime_timestamp(self)

    def __lt__(self, rhs):
        return _nfdrs.UTCTime___lt__(self, rhs)

    def __ge__(self, rhs):
        return _nfdrs.UTCTime___ge__(self, rhs)

    def __gt__(self, rhs):
        return _nfdrs.UTCTime___gt__(self, rhs)

    def __le__(self, rhs):
        return _nfdrs.UTCTime___le__(self, rhs)

    def __eq__(self, rhs):
        return _nfdrs.UTCTime___eq__(self, rhs)

    def __ne__(self, rhs):
        return _nfdrs.UTCTime___ne__(self, rhs)

    def __sub__(self, rhs):
        return _nfdrs.UTCTime___sub__(self, rhs)
    __swig_destroy__ = _nfdrs.delete_UTCTime

# Register UTCTime in _nfdrs:
_nfdrs.UTCTime_swigregister(UTCTime)

